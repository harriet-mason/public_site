---
title: "R-Ladies Meet-up"
subtitle: "Teaching Computers to See Scatterplots with Scagnostics"
author: Harriet Mason
institute: "Package Co-Authors: Di Cook, Ursula Laa, Stuart Lee"
date: "2023/11/08"
format: 
  revealjs: 
    theme: [default, custom.scss]
    slide-number: true
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  warning: false
  message: false
logo: rladieslogo.png
---

```{r setup}
#| label: setup
#| include: false

library(tidyverse)
library(cassowaryr)
library(ggimg)
library(ggstance)
library(fitzRoy)
library(gridExtra)
library(xaringanthemer)
library(GGally)
library(plotly)
library(tourr)

#generate palette
mypal <- c("#b2182b", "#d53e4f","#FF4E50", "#FC913A", "#fdae61",
           "#F9D423", "#fee08b" , "#abdda4" , "#a6d96a" , "#66c2a5" ,
           "#66bd63","#3B8183", "#3288bd", "#74add1",  "#abd9e9")

```


# Overview
Big Data  -  Scagnostics  -  Cassowaryr  - AFLW

::: {.notes}
- Hi everyone, I'm Harriet Mason, a PhD student at Monash University
- Today I'm going to be talking about scagnostics and the package that calculates them, cassowaryr
- What are scagnostics you may be thinking, it is pretty likely you have never come across the term before
- They are a group of measures that evaluate the visual features of a scatter plot
- Scatterplots are particularly useful for examining all kinds of association between variables
- and we assess that association by looking at the shape made by the points in a scatter plot, that is, its visual featues
- unfortunately big data has too many variables to plot them all.
- So, instead of looking at every pairwise plot, we instead picked out an interesting subst and only looked at those? That is the main idea behind scagnostics
- In this presentation I'm first going to explain how scagnostics work, then i'm going to explain the structure of the cassowaryr package that calculates the scagnostics, and finally I'll show how you can use the package yourself by going through an example using Australian football league statistics
:::

## How Do Scagnostics Work?

Take this "Ring" scatter plot...
  
```{r}
#| label: exampledata
#| include: false
example <- features %>% filter(feature=="ring") %>%
  select(x,y)
```

```{r}
#| label: ringscatter
#| fig-width: 5
#| fig-hight: 8
#| fig-align: "center"
ggplot(example, aes(x,y)) + geom_point(colour = "#3288bd") + theme_minimal() 

```

::: {.notes}
- So, lets see how the scagnostics are caulculated by looking at this "ring" shaped scatter plot.
:::

## How Do Scagnostics Work?

... and strip away everything but it's shape
  
```{r}
#| label: voidscatter
#| fig-width: 5
#| fig-hight: 5
#| fig-align: "center"
ggplot(example, aes(x,y)) + geom_point() + theme_void() + #colour = "#3288bd"
  theme(aspect.ratio=1, axis.text = element_blank()) 
```


::: {.notes}
- The first thing we do is remove the numbers and just look at the points in relation to each other
- from here we want to make several objects that represent the scatter plot's shape,
:::

## How Do Scagnostics Work?

... then build the graph based objects

```{r}
#| label: prep1
#| include: false
d1 <- draw_convexhull(example$x, example$y) +
  ggtitle("Convex hull") +
  xlab("") + ylab("") +
  theme_void() +
  theme(aspect.ratio=1, axis.text = element_blank())

d2 <- draw_alphahull(example$x, example$y) +
  ggtitle("Alpha hull") +
  xlab("") + ylab("") +
  theme_void() +
  theme(aspect.ratio=1, axis.text = element_blank())

d3 <- draw_mst(example$x, example$y) +
  ggtitle("Minimum Spanning Tree (MST)") +
  xlab("") + ylab("") +
  theme_void() +
  theme(aspect.ratio=1, axis.text = element_blank())
```

```{r}
#| label: alldrawings
#| fig-width: 10
#| fig-hight: 4
#| fig-align: "left"
grid.arrange(d1,d2,d3, nrow=1)
```


::: {.notes}

- the convex hull which is the shape we would get if we stretched a rubber band around the outside of the ring
- the alpha hull which is made by outlining the shape
- and the MST which is made by connecting every point up using as little edges as possible
- with these three objects we can define our scagnostics

:::

## The Scagnostics
:::: {.columns .v-center-container}

::: {.column width="50%"}
- Convex and Alpha Hull Measures
  - Convex
  - Skinny

- Association Measures
  - Monotonic
  - Splines
  - Dcor

:::

::: {.column width="50%"}
- MST Measures
  - Outlying
  - Clumpy*
  - Striated*
  - Sparse
  - Skewed
  - Stringy

:::

::::

::: {.notes}
- These are the scagnostics that are in the cassowaryR package, all of which have previously been defined in scagnostic liteature
- They are sorted into their three groups depending on which graph based object they use
- Those with an astrix have two versions, a calculation that was defined in "Scagnostic Distributions", a paper by Leland Wilkson and Graham Wills, as well as a new adjusted version that was created by us to solve some issues with binning that I will get to later. 
- To understand how we convert those graph based objects to scagnostics are calculated it helps to break it down
- so I will go through three of the scagnostics in a bit more detail

:::


## The Scagnostics
Convex uses the alpha hull and convex hull
  
![](figures/drawconvex.png){fig-align="center"}

::: {.notes}
- First up we have the scagnostic convex. This is a hull based measure, that is the ratio between the alpha hull and the convex hull
:::

## The Scagnostics

Outlying uses the MST
  
![](figures/drawoutlying.png){fig-align="center"}

::: {.notes}
- Second is outlying. This is an example of a measure that uses the minimum spanning tree
- First it identifies the outlying points and the length of their edges, then it calculates how much of the total MST length is due to these outling edges
:::


## The Scagnostics

Splines using the original data

![](figures/drawsplines.png){fig-align="center"}

::: {.notes}
- Finally we have splines. This is an example of an association measure, so it take in the raw data
- it calculates two splines models, one with x as a dependent variable and one with y as the dependent variable
- if either of these splines models have very low variance in their residuals, the splines scagnostic will be high
:::

## Assessing the Scagnostics

- All are on a uniform scale: 0-1, where 0 is low and 1 is high
  
- The ordering by scagnostic value hopefully matches how we perceive the structure, but it doesn't always
  
- Scagnostics hopefully identify different features but some are correlated with each other

 

::: {.notes}
- There are a couple rules for the scagnostics, they aren't just a free for all
- so, as well as defining several scagnostics, the scagnostic distributions paper I mentioned earlier also specifies three main rules these measures must follow.
- First they should all be on a uniform scale so they are directly comparable
- Second, each scagnostic should order a set of scatter plots in a way that lines up with human intuition
- Finally the scagnostics should be mostly uncorrelated. If two measures are highly correlated they are probably identifying a similar visual structure and we could do without one of the scagnostics.
- Of course these are not all 100% achievable, but these assessments should be kept in mind when adjusting and creating scagnostics.

:::

# The CassowaryR Package

::: {.notes}
- If you want to calculate these scagnostics yourself, you can do it very easily with the cassowaryr package
:::

## Structure
- Under the Hood Scagnostic Functions
  - Scree object
  - Scagnostic calculations  

- Summary Functions   
  - Wide and long data scagnostic summary
  - Top Summary

- Draw Functions  
  - MST, Convex Hull and Alpha hull

- Data
  - Datasaurus dozen/ Anscombe Quartet
  - Features

::: {.notes}
- The packages has been written so you can easily incorperate calculating scagnostics into a tidy data workflow
- The functions that calculate the scagnostics themselves are accessible and can be used in isolation, but
- The summary functions are how most people will use the cassowaryr package. 
- There are the two main scagnostic summary functions, one for long data and one for wide data.
- and also two further summary functions of that summary
- one that finds the highest value scatter plot for each scagnostic and another that finds the highest scoring scagnostic for each scatter plot.
- The use of these will all be shown in the example.
- The draw functions are mostly a debugging tool, they are designed to help you see the graph based objects so you can better understand the outputs of the package.
- cassowaryr also comes with some data that you can use to test the scagnostics, the most important of which is the features data.

:::

## The Features Dataset

```{r}
#| label: featuresplot
#| fig-align: "center"

ggplot(features, aes(x,y,colour=feature))+
  geom_point() +
  theme_minimal() + 
  facet_wrap(~feature, ncol=5, scales="free") +
  xlab("") + ylab("") +
  theme(legend.position = "none", 
        aspect.ratio= 1, 
        axis.text = element_blank()) +
  scale_colour_manual(values = mypal)

```

::: {.notes}
- The features dataset is a set of scatter plots, each with a distinct feature that we want to identify.
- It is not only important that the scagnostics can identify the features of the scatter plots but also differentiate between them
- For example, the Ring is a hollow version of the disk scatter plot, and we want the scagnostics to be able to see that
:::

## Features Scagnostics 

```{r}
#| label: featurescalc
#| echo: true
features_scagnostics_wide <- features %>%
  group_by(feature) %>%
  summarise(calc_scags(x,y))

# Look at the output
features_scagnostics_wide[1:5, 1:6]
```

::: {.notes}
- Because the features data set is a long data set, we use group by with the `calc_scags()` function to get a scagnostic summary of the data set
- the scagnostic summary can be quite large so this is a glimpse of what you would usually get.
:::

## A Scagnostic Visual Table

```{r}
#| label: scagcalculations
#| include: false

#long version of
features_scagnostics_long <- features_scagnostics_wide %>%
  pivot_longer(cols=outlying:dcor, names_to = "scagnostic")

#transpose of wide feature scagnostics table
t_features_scagnostics_wide <- features_scagnostics_long %>%
  pivot_wider(names_from = "feature")
```

```{r}
#| label: scatterplotsasimages
#| include: false
#| eval: false

#set theme so all scatter plots in table match
plot_theme <-  theme_void() + #theme_minimal() + 
  theme(aspect.ratio=1, axis.title=element_blank(), axis.text = element_blank(),
        panel.background = element_rect(fill="white", colour="white"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.border = element_rect(colour = "black", fill=NA, size=5),
        legend.position = "none"
        )

#save scatter plots as images
plots <- sort(unique(features$feature))

for (i in seq(length(plots))){
  holdplot <- features %>% 
    filter(feature==plots[i]) %>% 
    ggplot(aes(x,y, size=2))+ geom_point(colour=mypal[i]) + plot_theme +
    theme(panel.border = element_rect(colour = mypal[i], fill=NA, size=5))
    ggsave(paste0("figures/", plots[i], ".png"),holdplot) #files already in /figure/
}

```


```{r}
#| label: tableofplots
#| include: false

# edit data frame
plot_path_data <- features_scagnostics_long %>%
  mutate(plotad = paste0("figures/", feature, ".png"))

# which plots to include in visual table
whichplots <- function(scag, feature){
  pad = FALSE
  # Alphahull measures
  if(all(scag=="convex", feature %in% c("discrete", "ring", "l-shape"))){
    pad = TRUE
  }
  if(all(scag=="skinny", feature %in% c("line", "positive", "disk"))){
    pad = TRUE
  }
  
  # MST measures
  if(all(scag=="outlying", feature %in% c("outliers2","l-shape", "outliers"))){
    pad = TRUE
  }
  if(all(scag=="stringy", feature %in% c("nonlinear1", "gaps"))){
    pad = TRUE
  }
  if(all(scag=="striated", feature %in% c("vlines", "discrete", "weak"))){
    pad = TRUE
  }
  if(all(scag=="clumpy", feature %in% c("vlines", "clusters", "nonlinear"))){
    pad = TRUE
  }
  if(all(scag=="sparse", feature %in% c("weak", "line"))){
    pad = TRUE
  }
  if(all(scag=="skewed", feature %in% c("l-shape", "barrier"))){
    pad = TRUE
  }
  
  # Association Measures
  if(all(scag=="monotonic", feature %in% c("line", "positive", "discrete"))){
    pad = TRUE
  }
  if(all(scag=="splines", feature %in% c("nonlinear2", "clusters", "vlines"))){
    pad = TRUE
  }
  if(all(scag=="dcor", feature %in% c("positive", "barrier", "gaps"))){
    pad = TRUE
  }
  pad
}

# Make Visual Table
# Data
plot_data <- plot_path_data %>%
  group_by(scagnostic, feature) %>%
  mutate(doplot = whichplots(scagnostic, feature)) %>%
  ungroup() %>%
  filter(doplot==TRUE)

# so i dont have to keep adjusting the image size
s <- length(unique(plot_data$feature))

# plot
visual_table <- ggplot(plot_data, aes(x=value , y=scagnostic, colour=feature))+
  geom_point_img(aes(img = plotad), size = 1.25) + 
  xlim(-0.1,1.1) +
  scale_size_identity()+
  xlab("Value") +
  ylab("Scagnostic") +
  scale_colour_manual(values = mypal) +
  theme_classic() +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor = element_blank(),
    legend.position = "none",
    axis.line = element_blank(),
    strip.background = element_blank(),
    strip.text.x = element_blank(),
)
#ggsave("figures/visual_table.png", visual_table, width=10, height=10)
```

```{r}
#| label: visualtable
#| fig-height: 6
#| fig-width: 9
#| fig-align: center

visual_table
```

::: {.notes}
- Taking the full scagnostic summary we can make a visual table and have a look at what each scagnostic sees
- On the x axis is the scagnostic value
- On the y axis are the scagnostics
- The points are scatter plots from the features data, each scagnostic has an example of a low value, a high value, and a moderate value, if it fits.
- if you are paying close attention you may have noticed that the scagnostics based on the MST are the ones that most freuently only have two plots, this is because distributions are very condensed 
- this occurs because all previous work in scagnostics had binning as a pre processing step, we want binning to be optional in the cassowaryr package
- when we removed binning and allowed for infinitely small edges in the MST, it warped a few of the scagnostics
- and so to try and fix this, we have designed some adjusted scagnostics
:::

## Clumpy Adjusted 

```{r}
#| label: clumpycomparison
#| include: false

plot_data_clumpy <- plot_path_data %>%
  group_by(scagnostic, feature) %>%
  mutate(doplot = ifelse(all(scagnostic %in% c("clumpy","clumpy2"), 
                             feature %in% c("vlines", "clusters","barrier", "outliers", "nonlinear1", 	
"nonlinear2")),
                         TRUE,
                         FALSE)) %>% 
  ungroup() %>%
  filter(doplot==TRUE)


# plot
clumpy_visual_table <- ggplot(plot_data_clumpy, aes(x=value , y=scagnostic))+
  geom_point_img(aes(img = plotad), size = 2, 
                 position=ggstance::position_dodgev(height=0.9)) +
  xlim(-0.05,1.05) +
  scale_size_identity()+
  xlab("Value") +
  ylab("Scagnostic") +
  #ggtitle("Clumpy Comparison") +
  theme_classic() +
  theme(
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    legend.position="none",
    axis.line = element_blank(),
    strip.background = element_blank(),
    strip.text.x = element_blank(),
    panel.grid.major.y = element_line(),
    axis.text.y = element_text(size = rel(1.5))
)
#ggsave("figures/clumpy_visual_table.png", clumpy_visual_table, width=10, height=10)
```

```{r}
#| label: clumpytable
#| fig-width: 12
#| fig-height: 8
#| fig-align: center
clumpy_visual_table
```

::: {.notes}
- Here is the same visual table but we are only plotting clumpy with clumpy2 where clumpy2, an adjusted measure that does not require binning.
- you can see clumpy2 both a better job of identifying the clusters plot as it appears relatively higher on the measure and also is more uniform from 0 to 1.
- This measure is still being adjusted as it is quite slow, but even in its current state it performs better than the original measure without binning.
:::

## AFLW Example: The Data

- Australian Football League Women's
  
- Data from the 2020 Season
  
- 68 variables, 33 of which are numeric

- 528 Scatter Plots
  
- What are we expecting the scagnostics to find?
  
  
::: {.notes}
- While it is nice to know that the scagnostics work, correctly ordering scatter plots is not what they are used for, the measures need to be able to pick out interesting scatter plots from a large selection of scatter plots
- In order to do show that they do, in fact do this, I'm going to give an example using data from the AFLW 2020 season
- This data set is large, and has more pairs of variables than we could plot ourselves
- Hopefully the scagnostics will pick out some interesting pairs of variables
:::

## AFLW Example: The Data

```{r}
#| label: getafldata
#| echo: true
#| eval: false

# Get AFLW data
aflw <- fitzroy::fetch_player_stats(2020, comp = "AFLW")

# Scagnostics only work on numeric measures
aflw_num <- aflw %>%
  select_if(is.numeric)

# Calculate average all games in the season
aflw_num <- aggregate(aflw_num[,5:37], 
  list(aflw$player.player.player.surname),
  mean)

# Calculate scagnostics
AFLW_scags <- calc_scags_wide(aflw_num[,c(2:34)])
```

```{r}
#| label: makeafledata
#| eval: false
#| echo: false
#| include: false

aflw <- fetch_player_stats(2020, comp = "AFLW")
save(aflw, file="data/aflw.rda")

aflw_num <- aflw %>%
  select_if(is.numeric)

aflw_num <- aggregate(aflw_num[,5:37], 
  list(aflw$player.player.player.surname),
  mean)
save(aflw_num, file="data/aflw_num.rda")

AFLW_scags <- calc_scags_wide(aflw_num[,c(2:34)])
save(AFLW_scags, file="data/AFLW_scags.rda")
```

::: {.notes}
- So we fetch the data using the fitzroy package, and we have to make sure we are only using numeric variables since scagnostics only work on numeric variable
- Then we use the calc_scags_wide function to calculate every scagnostic on every possible pair of variables. This one can be a bit computationally heavy so you do have to leave it for a bit.
- Once you have this data the best way to analyse it is to look at a SPLOM of the scagnostics. 
:::

## AFLW Example: SPLOM

```{r}
#| label: aflsplom

#LOAD DATA
load("data/aflw.rda")
load("data/aflw_num.rda")
load("data/AFLW_scags.rda")

#rename for new scag
#AFLW_scags <- AFLW_scags %>%
  #rename(striated2 = striated_adjusted) %>%
  #rename(clumpy2 = clumpy_adjusted)

# add a label
AFLW_splom <- AFLW_scags %>%
  mutate(lab = paste0(Var1, ", ", Var2))

# make SPLOM
p <- GGally::ggpairs(AFLW_splom, columns=c(3,6,10,14,15), aes(label=lab)) +
  theme_classic()+
  theme(aspect.ratio = 1)
ggplotly(p)

#htmltools::save_html(p, file="aflwscag.html")
```


::: {.notes}
- Unfortunately a SPLOM of all the scagnostics won't fit on the slides so for this example I've made one with only a subset 
- The best way to find interesting scatter plots is to find plots that are away from the main mass of scatter plots in this splom. 
:::

## AFLW Example: Quiz!

```{r}
#| label: aflscatterplots
#| fig-height: 5
#| fig-width: 9

load("data/aflw.rda")
load("data/aflw_num.rda")
load("data/AFLW_scags.rda")

mypal <- c("#FF4E50", "#fdae61","#fee08b", "#66c2a5", "#3288bd", "#abd9e9")

#standounts from splom
#outlying and Skewed + highest skinny not 1
p1 <- ggplot(aflw_num, aes(x=disposalEfficiency, y=hitouts, label=Group.1)) + 
  theme_classic()+
  ggtitle("Plot 1") + 
  geom_point(colour=mypal[1]) 

#high on the 3 associations measures
p2 <- ggplot(aflw_num, aes(x=totalPossessions, y=disposals, label=Group.1)) + 
  theme_classic()+
  ggtitle("Plot 2") + 
  geom_point(colour=mypal[2]) 

#low on sparse and high on convex
p3 <- ggplot(aflw_num, aes(x=marksInside50, y=goals)) + 
  theme_classic()+
  ggtitle("Plot 3") + 
  geom_point(colour=mypal[3]) 

#high on clumpy adjusted, low on monotonic
p4 <- ggplot(aflw_num, aes(x=onePercenters, y=handballs)) +
  theme_classic()+
  ggtitle("Plot 4") + 
  geom_point(colour=mypal[4]) 

#interesting HIGH on striated, moderate on outlying
p5 <- ggplot(aflw_num, aes(x=bounces, y=hitouts, label=Group.1)) + 
  theme_classic()+
  ggtitle("Plot 5") + 
  geom_point(colour=mypal[5]) 

# me randomly picking two variables
p6 <- ggplot(aflw_num, aes(x=kicks, y=handballs)) + 
  theme_classic()+
  ggtitle("Plot 6") + 
  geom_point(colour=mypal[6])

grid.arrange(p1, p2, p3, p4, p5, p6,  nrow=2)
```

Which of these scatter plots was not identified  (have a high value) by scagnostics?

::: {.notes}
- Ok time for a bit of fun
- So, we run the scagnostics on this data and it tells us how interesting each scatter plot is
- 5 of these scatter plots had a high value, or a strange combination on one or more of the 11 scagnostics
- one of them were just two variables I plotted against each other not really knowing what they looked like
- Ill give you 10 seconds to try and guess which plot number you think was the one I picked at random before I change the slide

:::

## AFLW Example: Plot 6!
- Plot 6! 
  
```{r}
#| label: randomplots
#| fig-height: 3
#| fig-width: 9
p7 <- ggplot(aflw_num, aes(x=goals, y=clangers)) + 
  geom_point() +
  theme_classic()+ 
  ggtitle("Another Plot") 

p8 <- ggplot(aflw_num, aes(x=totalPossessions, y=metresGained)) + 
  geom_point() +
  theme_classic()+
  ggtitle("and Another Plot") 

grid.arrange(p6, p7, p8, nrow=1)

```

::: {.notes}
- It was plot 6! I picked the two variables that were the easiest to spell.
- Here is plot 6 alongside two other randomly chosen plots 
- These plots don't have structure that is as interesting as the plots chosen with scagnostics
- I'll show you how a couple of them were selected.
:::

## AFLW Example: Plot 1

```{r}
#| label: redscatter
#| include: false
test <- AFLW_scags %>%
  mutate(lab = paste0(Var1, ", ", Var2)) %>%
  mutate(plot1=ifelse(lab=="disposalEfficiency, hitouts", TRUE,FALSE),
         plot2=ifelse(lab=="totalPossessions, disposals", TRUE,FALSE),
         plot3=ifelse(lab=="marksInside50, goals", TRUE,FALSE),
         plot4=ifelse(lab=="onePercenters, handballs", TRUE,FALSE),
         plot5=ifelse(lab=="hitouts, bounces", TRUE, FALSE)
         ) %>%
  mutate(plotted = any(plot1,plot2,plot3,plot4, plot5))
s1 <- ggplot(test, aes(x=outlying, skewed, colour=plot1, label=lab)) + 
  geom_point() +
  theme_classic() +
  theme(legend.position ="none")+
  scale_colour_manual(values=c("grey", mypal[1]))+
  ggtitle("Relevant Scagnostics Plot")
#grid.arrange(p1, s1, nrow=1)
```

:::: {.columns .v-center-container}

::: {.column width="50%"}
```{r}
#| label: redp1
#| fig-height: 6
#| fig-width: 6
ggplotly(p1)%>%
  config(displayModeBar = FALSE)
```

:::

::: {.column width="50%"}
```{r}
#| label: redp2
#| fig-height: 6
#| fig-width: 6
ggplotly(s1)%>%
  config(displayModeBar = FALSE)
```
:::

::::

::: {.notes}
- Plot 1 was high on outlying and skewed
- This means that even after removing outliers, the data was still really spread out
- This structure is clearly visible in the scatter plot
:::

## AFLW Example: Plot 2

```{r}
#| label: orangescatter
#| include: false
s2 <- ggplot(test, aes(x=splines, dcor, colour=plot2, label=lab)) + 
  geom_point() +
  theme_classic() +
  theme(legend.position ="none")+
  scale_colour_manual(values=c("grey", mypal[1]))+
  ggtitle("Relevant Scagnostics Plot")
#grid.arrange(p2, s2, nrow=1)
```

:::: {.columns .v-center-container}

::: {.column width="50%"}
```{r}
#| label: organgep1
#| fig-height: 6
#| fig-width: 6
ggplotly(p2)%>%
  config(displayModeBar = FALSE)
```

:::

::: {.column width="50%"}
```{r}
#| label: orangep2
#| fig-height: 6
#| fig-width: 6
ggplotly(s2)%>%
  config(displayModeBar = FALSE)
```

:::

::::

::: {.notes}
- This plot is really high on the association measures
- usually a plot that deviates from this big mass, in the middle has a non-linear relationship in the scatter plot
- we dont have that here, so total posessions and disposals just have a strong linear relationships
:::

## AFLW Example: Plot 5

```{r}
#| label: bluescatter
#| include: false
s5 <- ggplot(test, aes(x=outlying, y = striated_adjusted, colour=plot5, label=lab)) +
  geom_point() +
  theme_classic() +
  theme(legend.position ="none") +
  scale_colour_manual(values=c("grey", mypal[5])) +
  ggtitle("Relevant Scagnostics Plot")

#grid.arrange(p5, s5, nrow=1)

```

:::: {.columns .v-center-container}

::: {.column width="50%"}
```{r}
#| label: bluep1
#| fig-height: 6
#| fig-width: 6
ggplotly(p5)%>%
  config(displayModeBar = FALSE)
```

:::

::: {.column width="50%"}
```{r}
#| label: bluep2
#| fig-height: 6
#| fig-width: 6
ggplotly(s5)%>%
  config(displayModeBar = FALSE)
```
:::

::::

::: {.notes}
- This plot is the last we will look at, and its my favourite
- it was identifiable because it was high on striated adjsuted and low on outlying
- This plot clearly shows that almost no players do both bounces and hitouts
-  hitouts are when you punch the ball when the ref throws it back in and they are done by your tall players, bounces have to be done while running so they are done by your fast players
- In AFL these two categories seem to have no overlap, tall and fast are mutually exclusive
- This is a fun example of what we can learn from our data
:::

## Top Summaries
- `top_pairs()`

```{r}
#| label: toppairs
#| echo: true
AFLW_pairs <- AFLW_scags %>%
  select(-c(clumpy, striated)) %>%
  top_pairs()
head(AFLW_pairs)
```

::: {.notes}
- The cassowaryr package also has two functions that summarise the scagnostic information, they are top_scags() and top_pairs().
- the top_pairs() function gives the top scagnostic for each scatter plot,

:::

## Top Summaries
- `top_pairs()`

```{r, echo=TRUE}
table(AFLW_pairs$scag)
```

::: {.notes}
- since the scagnostics are supposed to be directly comparable on a 0 to 1 scale, if one scagnostic appears a lot, it is likely identifying an underlying structure through the whole data set
:::


## Top Summaries
- `top_scags()` and `top_pairs()`

```{r, echo=TRUE}
#| label: topscags
#| echo: true
top_scags(AFLW_scags)[-c(3,4),] 

```

::: {.notes}
- top_scags() gives you the scatter plot that had the highest value on each scagnostic 
- a reccuring scatter plot that is high on a lot of measures is likely a scatter plot with an interesting structure
:::

## Projection Pursuit Index

```{r}
#| label: projpcalc

# set seed
set.seed(2020)
# get L-shape data
lshape <- features %>% 
  filter(feature=="l-shape")

# make tibble group a
feature_vs_noise_A <- tibble(x1 = 2.5* cassowaryr:::unitize(lshape$x),
                           x2 = rnorm(100, 0.5, 1),
                           x3 = rnorm(100, 0.5, 1),
                           x4 = 2.5* cassowaryr:::unitize(lshape$y),
                           x5 = rnorm(100, 0.5, 1),
                           group = rep("A",100)
                           )

# Make tibble group b
feature_vs_noise_B <- tibble(x1 = rnorm(100, 0.5, 1),
                           x2 = rnorm(100, 0.5, 1),
                           x3 = rnorm(100, 0.5, 1),
                           x4 = rnorm(100, 0.5, 1),
                           x5 = rnorm(100, 0.5, 1),
                           group = rep("B",100)
                           )


# combine tibbles
feature_vs_noise <- bind_rows(feature_vs_noise_A, feature_vs_noise_B)

set.seed(20190401)
bases <- readRDS("figures/tour_skinny_bet_7_500_5_.rds")
tour_path <- interpolate(bases, 0.1)
d <- dim(tour_path)
flea_std <- tourr::rescale(feature_vs_noise[,1:5])
mydat <- NULL; myaxes <- NULL
for (i in 1:d[3]) {
  fp <- as.matrix(feature_vs_noise[,1:5]) %*% matrix(tour_path[,,i], ncol=2)
  fp <- tourr::center(fp)
  colnames(fp) <- c("d1", "d2")
  mydat <- rbind(mydat, cbind(fp, rep(i+10, 2*nrow(fp))))
  fa <- cbind(matrix(0, 5, 2), matrix(tour_path[,,i], ncol=2))
  colnames(fa) <- c("origin1", "origin2", "d1", "d2") 
  myaxes <- rbind(myaxes, cbind(fa, rep(i+10, 2*nrow(fa))))
}
colnames(mydat)[3] <- "indx"
colnames(myaxes)[5] <- "indx"
df <- as_tibble(mydat) %>% 
  mutate(group = rep(feature_vs_noise$group, d[3]))
dfaxes <- as_tibble(myaxes) %>%
  mutate(labels=rep(colnames(feature_vs_noise[,1:5]), d[3]))
dfaxes_mat <- dfaxes %>%
  mutate(xloc = rep(max(df$d1)+0.4, d[3]*5), yloc=rep(seq(-0.6, 0.6, 0.3), d[3]), 
         coef=paste(round(dfaxes$d1, 2), ", ", round(dfaxes$d2, 2)))
p <- ggplot() +
       geom_segment(data=dfaxes, aes(x=2.5*d1-6, xend=origin1-6, 
                                     y=2.5*d2, yend=origin2, 
                                     frame = indx), colour="grey70") +
       geom_text(data=dfaxes, aes(x=2.5*d1-6, y=2.5*d2, label=labels, 
                                  frame = indx), colour="grey70") +
       geom_point(data = df, aes(x = d1, y = d2, colour=group, 
                                 frame = indx), size=1) +
       #geom_text(data=dfaxes_mat, aes(x=xloc, y=yloc, 
      #                            label=coef, frame = indx)) + 
       scale_colour_brewer(palette = "Dark2") +
       theme_void() +
       coord_fixed() +
  theme(legend.position="none")
pg <- ggplotly(p, width=700, height=400) %>%
  animation_opts(200, redraw = FALSE, 
                 easing = "linear", transition=0)
pg
#htmltools::save_html(pg, file="scagtour.html")
```



::: {.notes}
- All the methods I have been through so far have been how you will typically use scagnostics as an exploratory data method
- This is an example of a guided tour using the convex scagnostic as a projection pursuit index. 
- The data has the features L shape on the x1 and x4 biplot, and noise on all other variables
- The use for scagnostics as a projection pursuit index with the tour package is not in the cassowaryr package and some of the measures are not well suited to be used as projection pursuit indexes, either due to being too slow or noisey, but this is an area of future development for scagnostics.
:::


# Is It on CRAN?

- Yes
- but...

::: {.notes}
- You may be thinking to yourself, wow what a neat package, is it on cran?
- yes it is and it was a nightmare getting there however the version on cran does not calculate these examples
- one of the packages we are dependent on updated, which broke all these examples, and then the package underneath THAT updated, which fixed all these examples.
- this means the current version on cran will sometimes have a fit because of complicated reasons, the development version works without issues, so use that one if you can and hopefully the non-broken version will be on cran soon.
:::


## The Future of the Package
### Near
- Get new version on cran
- Publish paper
  
### Far
- Hexagonal binning
- Projection pursuit indexes

::: {.notes}
- What is next for for cassowaryR package
- we currently have a paper in the works, and now that our package is no longer completely broken, the examples work again we might be able to get it published.
- We also want to make make some changes to the package later down the line, like I want to try and introduce hexagonal binning so the original scagnostics aren't essentially useless.
- I also want to continue to test the scagnostics as projection pursuit indexes and maybe also have those be easy to implement in another package. I didn't show the code for implementing that projection pursuit in this presentation, but it is very long and tedious. 
- even as the author of the package is took me several weeks to get it working, so something that would be easier to impleent would be nice.

:::

# Thanks for Listening

- R package: https://github.com/numbats/cassowaryr
- Paper: https://github.com/harriet-mason/paper-cassowaryr (private)
- Slides: https://github.com/harriet-mason/UserTalk_2022 

::: {.notes}
- Thanks for listening,
- here is the link to the package if you want to have some fun with scagnostics
- And I'm now happy to take any questions
:::